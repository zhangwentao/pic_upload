[pic_uploader]

*DataBlockUploader
 将从数据队列中取出的图片文件的数据块和与其相关的参数上传至服务器，上传成功后，重复这一动作，取的动作失败后，
 休眠一定时间，再去取。
	

*UploaderPool: consumer[目的，节省内存，看情况]
 Uploader池，存放的Uploader。
 

*DataBlock:数据块
 由图片文件数据块和与其相关的参数组成。	
	size:	数据大小
	index:	索引从0开始计数。
	file:	对数据块所属文件的引用。
	
*UploadQueue:数据块队列
	size:	队列大小
	
	
	
	getData():DataBlock 取出一个数据块
	
*FileQueue
 
	
*File:图片文件
 图片文件的所有信息
	status:	文件当前状态
	fileReference:
	
*MainProcess: 上传功能 核心程序
	events:
		complete:成功上传一个图片文件；
 
 
---------------MEMO---------------
一张图片的缩略图的显示时机:图片被加载到内存，等待分块上传时，显示。
目的，图片上传时，图片数据已被加载到内存，这时截取缩略图避免了为此单独加载图片数据的过程。
核心上传模块，与UI解耦。

--------------VISION--------------
在程序运行的大部分时间内，有一定数量的uploader在同时上传图片数据给后台。
同一时刻，只把一定数量的图片数据加载到内存等待上传，以减小内存使用量。
在上传进行时，用户依然可以继续添加照片，算上继续添加的照片，一次上传的数量不能超过100张。
目的:因为图片的缩略图会一直存在于内存中，所以不能无限制地上传图片。内存会被缩略图耗尽。

----如何判断一个文件上传成功------
1.在文件的最后一个数据块上传成功后，返回一个特殊值
2.前端记录上传完成的数据块数，和总块数，比较这两个值


UI:
1.照片拖动模块。
2.与js交互
3.其他
MainProcess:
1.外部接口[供其他类调用的方法和调度的事件]
2.错误处理
3.配置模块
4.上传主进程[实现一级缓存，多进程上传]
SupportModule:
1.EXIF提取注入模块
2.文件数据切割模块
3.图片压缩模块
4.数据块上传模块
5.缩略图生成
6.对象池类
8.队列类

----------TODO-----------
2011.7.25:
	1.优化程序配置(一些常数和变量)
	2.优化主程序的 外部接口(1.外部调用的方法2.调度的事件)
   *3.从本地加载文件也采用多线程。
	4.设置fileItem状态
	
	
-------------UI------------
缩略图状态：
		1.上传完成
		2.正在上传
		3.等待缩略图
		4.等待上传

----------------------------
事件，
	1.uploadProgress:正在上传。
	2.uploadComplete:上传完毕。
	3.allUploadComplete:队列中所有文件上传完成。
	
	
-------用户操作-------------
1.选择要上传的文件
	单文件选择；
	多文件选择；
	
2.取消文件的上传
	上传前：在fileItem上做标记，上传操作执行到此文件时不上传这个。
	上传中：取消正在进行的上传操作；
			1.分块的情况
			2.不分块的情况
	上传后：在fileItem上做标记，不入库；
	
3.排序图片[照片在相册中出现的顺序]


4.旋转图片





----znr------
1.选完照片，点确定。需要发一个开始上传的事件（startUpload）。我需要一个对象。包含所有照片的id、照片张数
2.某张照片由等待上传变到开始上传。需要一个状态改变的事件（statusChange2Upload）。需要一个对象，包含该照片的id，如果可以，需要base64
3.某张照片由上传中变到完成上传。需要一个状态改变的事件（statusChange2Uploaded）。需要一个对象，包含该照片的id，以传完照片的张数，照片总数。
3.全部照片完成上传。需要一个完成上传的事件（finishUpload）。
	


